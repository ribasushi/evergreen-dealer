log_format service_json_combined escape=json
'{'
  '"timestamp":"$time_iso8601",'
  '"http_status":$status,'
  '"took_secs":$request_time,'
  '"sent_bytes":$bytes_sent,'
  '"compression":"$gzip_ratio",'
  '"req_method":"$request_method",'
  '"req_uri":"$request_uri",'
  '"req_bytes":$request_length,'
  '"remote_addr":"$remote_addr",'
  '"user_agent":"$http_user_agent"'
'}';

map $http_x_forwarded_proto $cur_scheme {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

server {
  root /var/www/dealer;

  server_name
    app-egd.fil.riba.cloud
    app-spade.fil.riba.cloud
    api.evergreen.filecoin.io
    api.spade.storage
  ;

  add_header Cache-Control "no-store, max-age=0";

  access_log /var/log/nginx/egd_access_log.json.log service_json_combined;

  real_ip_header X-Forwarded-For;
  real_ip_recursive on;
  # source https://www.cloudflare.com/ips/
  # https://www.cloudflare.com/ips-v4
  # https://www.cloudflare.com/ips-v6
  # ( curl -s https://www.cloudflare.com/ips-v4 ; echo ; curl -s https://www.cloudflare.com/ips-v6; echo ) | sed 's/.*/set_real_ip_from &;/'
  set_real_ip_from 173.245.48.0/20;
  set_real_ip_from 103.21.244.0/22;
  set_real_ip_from 103.22.200.0/22;
  set_real_ip_from 103.31.4.0/22;
  set_real_ip_from 141.101.64.0/18;
  set_real_ip_from 108.162.192.0/18;
  set_real_ip_from 190.93.240.0/20;
  set_real_ip_from 188.114.96.0/20;
  set_real_ip_from 197.234.240.0/22;
  set_real_ip_from 198.41.128.0/17;
  set_real_ip_from 162.158.0.0/15;
  set_real_ip_from 104.16.0.0/13;
  set_real_ip_from 104.24.0.0/14;
  set_real_ip_from 172.64.0.0/13;
  set_real_ip_from 131.0.72.0/22;
  set_real_ip_from 2400:cb00::/32;
  set_real_ip_from 2606:4700::/32;
  set_real_ip_from 2803:f800::/32;
  set_real_ip_from 2405:b500::/32;
  set_real_ip_from 2405:8100::/32;
  set_real_ip_from 2a06:98c0::/29;
  set_real_ip_from 2c0f:f248::/32;

  gzip on;
  gzip_types text/plain text/css application/json;
  gzip_proxied any;
  gzip_vary on;
  gzip_min_length 256;
  gzip_comp_level 9;

  error_page 301 /default_non_2xx_body.json;

  # public/* is a-ok
  location ~ ^/public(?:/.*)?$ {
    allow all;
  }

  # sigh.
  location /favicon.ico {
    return 204;
    access_log     off;
    log_not_found  off;
  }

  # Strip trailing /
  location ~ ^(.+)/$ { return 301 $cur_scheme://$host$1; }

  # legacy API redirects
  location /eligible_pieces/anywhere  { return 301 $cur_scheme://$host/sp/eligible_pieces?$args; }
  location /eligible_pieces/sp_local  { return 301 $cur_scheme://$host/sp/eligible_pieces?$args&orglocal-only; }
  location ~ ^/request_piece/([^/]+)$ { return 301 $cur_scheme://$host/sp/request_piece/$1; }
  location /pending_proposals         { return 301 $cur_scheme://$host/sp/pending_proposals; }

  # only hit the app if we recognize the request
  location ~ ^/sp/(?:status|eligible_pieces|request_piece/[^/]+|pending_proposals)$ {

    # short-circuit 401 if header absent: do not even hit the app
    include /var/www/dealer/unauth_short_circuit.conf;

    # special case these so that we output a placeholder at all times
    # especially important for 400, as golang's http error handler isn't json
    proxy_intercept_errors on;
    error_page 400 500 502 /default_app_error_body.json;

    proxy_set_header Accept-Encoding ""; # we are the ones compressing, not the app
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_pass http://127.0.0.1:8080;
  }

  # for everything else serve an unknwon
  location / {
    # short-circuit 401 if header absent
    include /var/www/dealer/unauth_short_circuit.conf;

    error_page 403 /default_non_2xx_body.json;
    return 403;
  }

  # SSI for error messages
  location ~ ^/default_(?:non_2xx|unauthorized|app_error)_body.json$ {
    internal;
    allow all;
    ssi on;
    ssi_types *;
    add_header WWW-Authenticate: FIL-SPID-V0 always;
  }
}
